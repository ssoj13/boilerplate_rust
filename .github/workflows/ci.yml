name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Test compilation and basic checks
  check:
    name: Check and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo-gobject2 \
            libgtk-layer-shell-dev \
            libdbus-1-dev

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

  # Build tests on multiple platforms
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI time - only test beta on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo-gobject2 \
            libgtk-layer-shell-dev \
            libdbus-1-dev \
            xvfb

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: cargo test --lib --all-features

      - name: Build release binary
        run: cargo build --release

      - name: Test CLI arguments (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          timeout 5s ./target/release/egui_opengl_app --help || true
          timeout 5s ./target/release/egui_opengl_app --version || true

      - name: Test CLI arguments (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Start-Process -FilePath ".\target\release\egui_opengl_app.exe" -ArgumentList "--help" -Wait -NoNewWindow -TimeoutSec 5 -ErrorAction SilentlyContinue
          Start-Process -FilePath ".\target\release\egui_opengl_app.exe" -ArgumentList "--version" -Wait -NoNewWindow -TimeoutSec 5 -ErrorAction SilentlyContinue

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: egui-opengl-app-${{ matrix.os }}-${{ matrix.rust }}
          path: |
            target/release/egui_opengl_app*
            !target/release/deps/
            !target/release/build/
          retention-days: 7

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Documentation and examples
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-docs-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build documentation
        run: cargo doc --all-features --no-deps

      - name: Check for broken links in docs
        run: |
          find target/doc -name "*.html" -exec grep -l "broken-link" {} \; || true

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/
          retention-days: 30

  # Performance regression tests
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          # Measure compilation time
          time cargo build --release
          
          # Measure binary size
          ls -lh target/release/egui_opengl_app
          
          # Basic startup benchmark (if we add criterion later)
          # cargo bench --all-features

      - name: Comment benchmark results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const stats = fs.statSync('target/release/egui_opengl_app');
            const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Performance Report\n\n**Binary Size:** ${sizeMB} MB\n\n*Automated benchmark from CI*`
            });