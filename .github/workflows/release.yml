name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload Release Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: egui_opengl_app-linux.zip
          - os: windows-latest
            asset_name: egui_opengl_app-windows.zip
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo-gobject2 \
            libgtk-layer-shell-dev \
            libdbus-1-dev

      - name: Build release binary
        run: cargo build --release

      - name: Create Linux release package
        if: runner.os == 'Linux'
        run: |
          mkdir release
          cp target/release/egui_opengl_app release/
          cp README.md release/
          chmod +x release/egui_opengl_app
          zip -r ${{ matrix.asset_name }} release/

      - name: Create Windows release package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          mkdir release
          copy "target\release\egui_opengl_app.exe" release\
          copy README.md release\
          Compress-Archive -Path release\* -DestinationPath ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/zip