name: Security

on:
  schedule:
    # Run security audit weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Rust security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit --json > audit-results.json || true

      - name: Parse audit results
        id: audit
        run: |
          if [ -s audit-results.json ]; then
            # Check if there are any vulnerabilities
            vulnerabilities=$(jq '.vulnerabilities.found | length' audit-results.json)
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
              echo "vulnerability_count=$vulnerabilities" >> $GITHUB_OUTPUT
              jq -r '.vulnerabilities.list[] | "::warning::Security vulnerability found in \(.package.name) \(.package.version): \(.advisory.title) (ID: \(.advisory.id))"' audit-results.json
            else
              echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
              echo "::notice::No security vulnerabilities found"
            fi
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "::notice::Audit completed successfully with no issues"
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 90

      - name: Fail if vulnerabilities found
        if: steps.audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "::error::Found ${{ steps.audit.outputs.vulnerability_count }} security vulnerabilities"
          exit 1

  # License compliance check
  licenses:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "# Dependency Licenses" > licenses.md
          echo "" >> licenses.md
          cargo license --json | jq -r '.[] | "- **\(.name)** (\(.version)): \(.license)"' >> licenses.md

      - name: Check for problematic licenses
        run: |
          # List of problematic licenses that should trigger warnings
          PROBLEMATIC_LICENSES="GPL-2.0 GPL-3.0 AGPL-1.0 AGPL-3.0"
          
          for license in $PROBLEMATIC_LICENSES; do
            if cargo license --json | jq -e --arg lic "$license" '.[] | select(.license == $lic)' >/dev/null; then
              echo "::warning::Found dependency with potentially problematic license: $license"
            fi
          done

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.md
          retention-days: 90

  # Dependency update check
  outdated:
    name: Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Check for outdated dependencies
        run: |
          cargo outdated --exit-code 1 > outdated.txt || echo "Found outdated dependencies"

      - name: Parse outdated results
        run: |
          if [ -s outdated.txt ]; then
            echo "::warning::Some dependencies are outdated. Consider updating:"
            cat outdated.txt
          else
            echo "::notice::All dependencies are up to date"
          fi

      - name: Upload outdated report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: outdated-dependencies
          path: outdated.txt
          retention-days: 30

  # SARIF upload for GitHub Security tab
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['rust']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libgtk-3-dev \
            libglib2.0-dev

      - name: Build for analysis
        run: cargo build --all-features

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"